<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>R on E. Visel</title>
    <link>/categories/r/</link>
    <description>Recent content in R on E. Visel</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 23 Mar 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/categories/r/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Pythagorean Triples</title>
      <link>/blog/pythagorean-triples/</link>
      <pubDate>Fri, 23 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>/blog/pythagorean-triples/</guid>
      <description>In a quiet moment, I happened across Project Euler’s Question 39:
 Integer right triangles Problem 39 If \(p\) is the perimeter of a right angle triangle with integral length sides, \(\{a,b,c\}\), there are exactly three solutions for \(p = 120\):
\[\{20,48,52\}, \{24,45,51\}, \{30,40,50\}\]
For which value of \(p \le 1000\), is the number of solutions maximised?
 Put another way, what integer perimeter less than or equal to 1000 has the most Pythagorean triples?</description>
    </item>
    
    <item>
      <title>p5 in R</title>
      <link>/blog/p5-in-r/</link>
      <pubDate>Fri, 23 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>/blog/p5-in-r/</guid>
      <description>p5.js is a version of Processing built natively in JavaScript. It’s really, really awesome.
Sean Kross wrote R bindings for p5.js in his p5 package so it can be written and R and published as an htmlwidget. This is a little exploration of how it works.
library(p5) # runs once at start setup_ &amp;lt;- setup() %&amp;gt;% createCanvas(500, 500) %&amp;gt;% noStroke() # reruns every frame draw_ &amp;lt;- draw() %&amp;gt;% background(&amp;#39;#888&amp;#39;) %&amp;gt;% fill(rgb(1, 1, 1, 0.</description>
    </item>
    
    <item>
      <title>passport</title>
      <link>/package/passport/</link>
      <pubDate>Wed, 21 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>/package/passport/</guid>
      <description>For further information including complete documentation, see passport’s full website.
passport    
passport smooths the process of working with country names and codes via powerful parsing, standardization, and conversion utilities arranged in a simple, consistent API. Country name formats include multiple sources including the Unicode CLDR common-sense standardizations in hundreds of languages.
Installation Install from CRAN with
install.packages(&amp;quot;passport&amp;quot;) or the development version from GitHub with
# install.packages(&amp;quot;devtools&amp;quot;) devtools::install_github(&amp;quot;alistaire47/passport&amp;quot;)  Travel smoothly between country name and code formats Working with country data can be frustrating.</description>
    </item>
    
    <item>
      <title>pipecleaner</title>
      <link>/package/pipecleaner/</link>
      <pubDate>Wed, 21 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>/package/pipecleaner/</guid>
      <description>For further information including complete documentation, see pipecleaner’s full website.
pipecleaner     
pipecleaner is a utility R package to debug pipelines using the magrittr %&amp;gt;% pipe. Its debug_pipeline launches the debugging browser on the input pipeline in a form that allows the user to step through the successive calls of the pipeline, examining the output of each successive element.
Installation pipecleaner is not currently on CRAN, but can be installed with</description>
    </item>
    
    <item>
      <title>read.so</title>
      <link>/package/read-so/</link>
      <pubDate>Wed, 21 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>/package/read-so/</guid>
      <description>For further information including complete documentation, see read.so’s full website.
read.so    
Installation read.so is not on CRAN, but you can install it with
# install.packages(&amp;quot;devtools&amp;quot;) devtools::install_github(&amp;quot;alistaire47/read.so&amp;quot;)  Read Tables from Stack Overflow Questions into R Sometimes you see a really interesting question on Stack Overflow, but the asker only presents the data as a presentation-style table instead of as runnable R code. Fear no more! read.so will read even heinous tables into a data frame in a trice.</description>
    </item>
    
  </channel>
</rss>